/* Additional includes go here */

#include <pthread.h>
#include <queue>

#include "ProtobufServer.hpp"
#include "ProtobufConnection.hpp"

<%SPL::CodeGen::headerPrologue($model);%>

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
public:
  // Constructor
  MY_OPERATOR();

  // Destructor
  virtual ~MY_OPERATOR(); 

  // Notify port readiness
  void allPortsReady(); 

  // Submit a tuple
  static void * tupleSubmit(void * voidPtr);

  // Notify termination
  void prepareToShutdown(); 

  // Processing for source and threaded operators   
  void process(uint32_t idx);
    
  // Tuple processing for mutating ports 
  void process(Tuple & tuple, uint32_t port);
    
  // Tuple processing for non-mutating ports
  void process(Tuple const & tuple, uint32_t port);

  // Punctuation processing
  void process(Punctuation const & punct, uint32_t port);

private:
    // Members
    ProtobufServer * protobufServer;

    pthread_mutex_t pthreadMutex;
    pthread_cond_t pthreadCond;

    std::queue<std::string> tupleQueue;
}; 

struct op_wrapper {
    MY_OPERATOR *object;
    std::string *buffer;
};


<%SPL::CodeGen::headerEpilogue($model);%>

